New York has hired some contractors – including you! – to manage the pipe network. 
They built the network, at great expense, to supply Flubber to every home in the city. 
Unfortunately, nobody has found a use for Flubber yet, but never mind. 
It was a Flubber network or a fire department, and honestly, houses burn down so rarely, a fire department hardly seems necessary. 
In the possible event that somebody somewhere decides they want some Flubber, they would like to know how quickly it will flow through the pipes. 
Measuring its rate of flow is your job. You have access to one of the pipes connected to the network.
The pipe is l meters long, and you can start the flow of Flubber through this pipe at a time of your choosing. 
You know that it flows with a constant real-valued speed, which is at least v1 meters/second and at most v2 meters/second. 
You want to estimate this speed with an absolute error of at most t 2 meters/second. 
Unfortunately, the pipe is opaque, so the only thing you can do is to knock on the pipe at any point along its length, that is, in the closed real-valued range [0, l]. 
Listening to the sound of the knock will tell you whether or not the Flubber has reached that point. You are not infinitely fast. 
Your first knock must be at least s seconds after starting the flow, and there must be at least s seconds between knocks. 
Determine a strategy that will require the fewest knocks, in the worst case, to estimate how fast the Flubber is flowing. 
Note that in some cases the desired estimation might be impossible (for example, if the Flubber reaches the end of the pipe too quickly).
------------------------------------------------------------
#include <iostream>
using namespace std;
int main() 
{
    int L, V1, V2, Tol, S;
    cin >> L >> V1 >> V2 >> Tol >> S;
    int leaves = (V2-V1+Tol-1)/Tol, minv = V2-leaves*Tol, nodes = 1, depth = 0;
    while (nodes > 0 && leaves > nodes) 
    {
      depth++;
      int maxv = L / (S*depth);
      int leaves2 = min(leaves, (maxv-minv+Tol)/Tol);
      nodes -= leaves - leaves2;
      nodes *= 2;
      leaves = leaves2;
    }
    if (nodes <= 0) 
    {
      cout << "impossible "<<depth << endl;
    } else 
    {
      cout << depth << endl;
    }
  
}
