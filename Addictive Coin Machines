You have been hired by Addictive Coin Machines to help design the next hit in their line of eye-catching, coin-guzzling, 
just-one-more-try Pinball machines for casinos around the world. Playing a Pinball machine involves launching balls into a rectangular grid filled with pegs,
obstacles, and targets. The ball bounces around the grid until it eventually hits one of the targets. The player earns a certain number of points depending on which target is hit.
The grid pattern for the next Pinball machine has already been designed, but point values for the targets have not been assigned.
These must be set so that like all casino machines, the machine is profitable but not too profitable. 
Thus it is important to figure out the probability of a ball hitting any particular target.
That’s your job! For simplicity, the grid is modeled as a tall rectangle filled with mostly-open spaces (each represented by ‘.’), 
impassable obstacles (each represented by ‘X’), and targets (each represented by ‘T’). 
A ball is launched randomly with uniform probability into one of the mostly-open spaces on the top row of the grid. 
From that point on, collisions with pegs cause the ball to randomly bounce up, down, left, or right, with variously given probabilities. 
For simplicity, assume these probabilities are the same for every space in the grid. If the ball bounces into an obstacle or attempts to move off the grid,
it won’t move from its current space. When the ball moves into a target it is removed from play.
You can safely assume that the average number of spaces visited by a ball before hitting a target will not exceed 109 .
It would not make for a very enjoyable game if the ball just bounces forever! For each target, calculate the probability that it is the one hit by a launched ball.
-----------------------------------------------------------------------------------------
#include<cassert>
#include<cstdio>
#include<cstring>
#include<iostream>
using namespace std;

int W,H,Pu,Pd,Pl,Pr;
char g[10000][21];
bool seen[10000][20];
double M[10000][20][61],V[10000][20];
void dfs(int x,int y){
    if(x<0 || x>=W||y<0||y>=H||g[y][x]=='X') return;
    if(seen[y][x]) return;
    seen[y][x]=true;
    if(g[y][x]=='T') return;
    dfs(x-1,y);
    dfs(x+1,y);
    dfs(x,y-1);
    dfs(x,y+1);
}
main(){
    while(cin>>W>>H){
        cin>>Pu>>Pd>>Pl>>Pr;
        for(int y=0;y<H;y++) cin>>g[y];
        memset(seen,0,sizeof(seen));
        memset(M,0,sizeof(M));
        memset(V,0,sizeof(V));
        
        int ns=0;
        for(int x=0;x<W;x++) if(g[0][x]=='.') { ns++; dfs(x,0);}
        for(int x=0;x<W;x++) if(g[0][x]=='.') M[0][x][60]=1.0/ns;
        for(int y=0;y<H;y++)
        for(int x=0;x<W;x++){
            M[y][x][20+x]=1.0;
            if(g[y][x]!='.' || !seen[y][x]) continue;
            double P=0;
            if(x>0 && g[y][x-1]  !='X') P+=Pl;
            if(x<W-1 && g[y][x+1]!='X') P+=Pr;
            if(y>0 && g[y-1][x]  !='X') P+=Pu;
            if(y<H-1 && g[y+1][x]!='X') P+=Pd;
            if(P==0) continue;
            if(x>0 && g[y][x-1]  !='X') M[y][x-1][20+x] -= Pl/P;
            if(x<W-1 && g[y][x+1]!='X') M[y][x+1][20+x] -= Pr/P;
            if(y>0 && g[y-1][x]  !='X') M[y-1][x][40+x] -= Pu/P;
            if(y<H-1 && g[y+1][x]!='X') M[y+1][x][  x]  -= Pd/P;
        }
        for(int y=0;y<H;y++)
        for(int x=0;x<W;x++) if(seen[y][x]) {
            double c=M[y][x][20+x];
            for(int i=20+x;i<61;i++) M[y][x][i] /=c;
            for(int x2=x+1;x2<W;x2++){
                c=M[y][x2][20+x];
                for(int i=20+x;i<61;i++) M[y][x2][i] -= c * M[y][x][i];
            }
            if(y<H-1) for(int x2=0;x2<W;x2++){
                c=M[y+1][x2][x];
                for(int i=20+x;i<60;i++) M[y+1][x2][i-20] -= c * M[y][x][i];
                M[y+1][x2][60] -= c* M[y][x][60];
            }
        }
        double tot=0.0;
        for(int y=H-1;y>=0;y--)
        for(int x=W-1;x>=0;x--) if(seen[y][x]){
            double& v=V[y][x];
            v=M[y][x][60];
            for(int i=20+x+1;i<40;i++) v -= M[y][x][i] * V[y][i-20];
            if(y<H-1) for(int i=40;i<60;i++) v -=M[y][x][i] * V[y+1][i-40];
            tot += v;
        }
        assert(tot <1e9);
        
        for(int y=0;y<H;y++)
        for(int x=0;x<W;x++) if(g[y][x] == 'T'){
            printf("%.9lf\n",V[y][x]);
        }
    }
}
