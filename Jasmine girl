Jasmine is a girl. She loves Chef Alexa very much. 
Since Jasmine has completed collecting the stamps in Alexa's restaurant, she now challenges the bonus game in Alexa's restaurant. 
There are some colored balls in a box. The number of colors is represented by an integer variable colors , and the number of balls of each color i in the box is Si for i = 1, 2, ..., colors initially.
At first, Jasmine has certain number of coins represented by an integer variable coins.
And Jasmine's aim in this game is to get many coins at the end of the game. This game will run as follows.
Jasmine chooses a color, and Jasmine bets some coins (suppose x coins are bet) on the color. 
Here, x must be non-negative integer and its value should be less than or equal to certain value represented by an integer variable coin_limit. 
Jasmine must have x coins before betting. Then Alexa chooses a ball from the box, checks its color and discards the ball. 
If the ball has the same color as Jasmine's bet, then Jasmine gets B*x coins, otherwise Jasmine must pay x coins. Note that, if Jasmine wins, then she receives back her bet as well as B*x coins. 
While the box has at least one ball, the above process are repeated. When the box is empty, the game is over.
The game is very kind, because Jasmine always can increase her coins. 
Instead of this, Alexa is not kind in this game, she chooses the balls which minimize Jasmine's coins at the end of the game (Yes, she can choose balls as she likes!). 
Your task is to calculate the maximum number of coins that can be obtained by Jasmine at the end of the game.
-----------------------------------------------------------------------
#include <algorithm>
#include <numeric>
#include <iostream>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <stack>
#include <set>
#include <map>
#include <cstdio>
#include <cstdlib>
#include <cassert>
#include <cstring>
#include <cmath>
using namespace std;

#define REP(i,n) for(int i=0;i<(int)(n);++i)
#define RREP(i,a,b) for(int i=(int)(a);i<(int)(b);++i)
#define FOR(i,c) for(typeof((c).begin()) i=(c).begin();i!=(c).end();++i)

#define ALL(c) (c).begin(), (c).end()
#define MP make_pair

#define EXIST(e,s) ((s).find(e)!=(s).end())

#define RESET(a) memset((a),0,sizeof(a))
#define SET(a) memset((a),-1,sizeof(a))
#define PB push_back


typedef long long Int;
typedef unsigned long long uInt;
typedef long double rn;

typedef pair<int,int> pii;

#ifdef DEBUG
#include"debug.h"
#include"print.h"
#endif


int ct=0;

int colors,B;
Int coins,coin_limit;
int S[100];
Int x;

Int dp[100][1024];


int peak[1024];


Int calc(int p,int q){

	if(dp[p][q]>=0)return dp[p][q];
	if(p==0 and q==0)return dp[p][q]=x;


	int p1,q1;
	p1=p-1;q1=q;
	if(peak[q]>p1)p1=peak[q],q1=p+q-1-p1;
	Int x0=calc(p1,q1);

	if(q==0){
		Int t=(x0+B)/(B+1);
		t=max(x0-coin_limit*B,t);
		return dp[p][q]=t;
	}

	Int x1=calc(p,q-1);
	Int u=x0+x1*B;
	Int result=(u+B)/(B+1);
	result=max(x0-coin_limit*B,result);
	return dp[p][q]=result;
}

bool judge(Int x){
	::x=x;
	memset(dp,-1,sizeof(dp));
	Int t=calc(S[colors-1],accumulate(S,S+colors-1,0));
	return t<=coins;
}

Int bs(){
	Int l=0,r=1e+15;
	while(r-l>1){
		if(judge((l+r)/2)){
			l=x;
		}else{
			r=x;
		}
	}
	return l;
}

void main2(){
	scanf("%d%d%lld%lld",&colors,&B,&coins,&coin_limit);
	REP(i,colors)scanf("%d",S+i);
	sort(S,S+colors);
	if(colors>1){
		vector<int> v;
		REP(i,colors-1)v.push_back(S[i]);
		while(1){
			int s=accumulate(ALL(v),0);
			peak[s]=v.back();
			if(s==0)break;
			v.back()--;
			sort(ALL(v));
		}
	}
	printf("%lld\n",bs());
}



int main() {
		main2();
        return 0;
}

