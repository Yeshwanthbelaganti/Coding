Consider a highway of M miles. Your task is to place the Toll on the highway such that revenue is maximized. 
The possible sites for Toll are given by number x1<x2<..xn-1, specifying positions in miles measured from one end of the road. 
If we place a Toll at position xi, we receive a revenue of ri>0. 
There is a restriction that no two Toll can be placed within t miles or less than it.
----------------------------------------------
import java.util.Scanner;
class GFG  
{  
      
static int maxRevenue(int m, int[] x, 
                    int[] revenue,  
                    int n, int t)  
{  
      
    // Array to store maximum revenue  
    // at each miles.  
    int[] maxRev = new int[m + 1];  
    for(int i = 0; i < m + 1; i++) 
        maxRev[i] = 0; 
  
    // actual minimum distance between 
    // 2 billboards.  
    int nxtbb = 0;  
    for (int i = 1; i <= m; i++)  
    {  
        // check if all billboards are  
        // already placed.  
        if (nxtbb < n)  
        {  
            // check if we have billboard for  
            // that particular mile. If not, 
            // copy the previous maximum revenue.  
            if (x[nxtbb] != i)  
                maxRev[i] = maxRev[i - 1];  
  
            // we do have billboard for this mile.  
            else
            {  
                // We have 2 options, we either take  
                // current or we ignore current billboard.  
  
                // If current position is less than or  
                // equal to t, then we can have only  
                // one billboard.  
                if (i <= t)  
                    maxRev[i] = Math.max(maxRev[i - 1],  
                                        revenue[nxtbb]);  
  
                // Else we may have to remove  
                // previously placed billboard  
                else
                    maxRev[i] = Math.max(maxRev[i - t - 1] +  
                                        revenue[nxtbb],  
                                        maxRev[i - 1]);  
  
                nxtbb++;  
            }  
        }  
        else
            maxRev[i] = maxRev[i - 1];  
    }  
  
    return maxRev[m];  
}  
  
// Driver Code 
public static void main(String []args)  
{  
    int m, limit;
    Scanner in = new Scanner(System.in);
    m=in.nextInt();
    limit=in.nextInt();
    int[] x = new int[limit];
     int[] revenue = new int[limit]; 
    for (int i=0;i<limit;i++)
    {
        x[i]=in.nextInt();
    }
    for(int i=0;i<limit;i++)
    {
        revenue[i]=in.nextInt();
    }
    
    int n = x.length;  
    int t = in.nextInt();  
    System.out.println(maxRevenue(m, x, revenue, n, t));  
} 
} 
