Catherine is a maths teacher in a St.Paul school. She gives a task to his students to solve, the task is that she will be given a number of pages in N different books and S students. The books are arranged in ascending order of number of pages. Every student is assigned to read some consecutive books. The task is to assign books in such a way that the maximum number of pages assigned to a student is minimum.
For Ex:
If N=4 and The pages of the book are 12, 34, 67 and 90. S=2
Output: 113
There are 2 number of students. Books can be distributed in following fashion :  1) [12] and [34, 67, 90]
   Max number of pages is allocated to student 
   2 with 34 + 67 + 90 = 191 pages
 2) [12, 34] and [67, 90]
   Max number of pages is allocated to student
   2 with 67 + 90 = 157 pages 
 3) [12, 34, 67] and [90]
   Max number of pages is allocated to student 
   1 with 12 + 34 + 67 = 113 pages
Of the 3 cases, Option 3 has the minimum pages = 113.
------------------------------------------------
// C++ program for optimal allocation of pages 
#include<bits/stdc++.h> 
using namespace std; 

// Utility function to check if current minimum value 
// is feasible or not. 
bool isPossible(int arr[], int n, int m, int curr_min) 
{ 
	int studentsRequired = 1; 
	int curr_sum = 0; 

	// iterate over all books 
	for (int i = 0; i < n; i++) 
	{ 
		// check if current number of pages are greater 
		// than curr_min that means we will get the result 
		// after mid no. of pages 
		if (arr[i] > curr_min) 
			return false; 

		// count how many students are required 
		// to distribute curr_min pages 
		if (curr_sum + arr[i] > curr_min) 
		{ 
			// increment student count 
			studentsRequired++; 

			// update curr_sum 
			curr_sum = arr[i]; 

			// if students required becomes greater 
			// than given no. of students,return false 
			if (studentsRequired > m) 
				return false; 
		} 

		// else update curr_sum 
		else
			curr_sum += arr[i]; 
	} 
	return true; 
} 

// function to find minimum pages 
int findPages(int arr[], int n, int m) 
{ 
	long long sum = 0; 

	// return -1 if no. of books is less than 
	// no. of students 
	if (n < m) 
		return -1; 

	// Count total number of pages 
	for (int i = 0; i < n; i++) 
		sum += arr[i]; 

	// initialize start as 0 pages and end as 
	// total pages 
	int start = 0, end = sum; 
	int result = INT_MAX; 

	// traverse until start <= end 
	while (start <= end) 
	{ 
		// check if it is possible to distribute 
		// books by using mid as current minimum 
		int mid = (start + end) / 2; 
		if (isPossible(arr, n, m, mid)) 
		{ 
			// if yes then find the minimum distribution 
			result = min(result, mid); 

			// as we are finding minimum and books 
			// are sorted so reduce end = mid -1 
			// that means 
			end = mid - 1; 
		} 

		else
			// if not possible means pages should be 
			// increased so update start = mid + 1 
			start = mid + 1; 
	} 

	// at-last return minimum no. of pages 
	return result; 
} 

// Drivers code 
int main() 
{ 
	//Number of pages in books 
	int N;
	cin>>N;
	int arr[N];
	for(int i=0;i<N;i++)
	{
	    cin>>arr[i];
	}
	int S;
	cin>>S;

	cout << findPages(arr, N, S) << endl; 
	return 0; 
}
