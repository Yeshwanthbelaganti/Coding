David works as a programmer. Like all programmers, he is a coffee fan. He likes coffee so much that has K cups of coffee daily. 
However, having more than K cups doesn't suit him, because the excess caffeine won't allow him to sleep at night.
David's working day is divided into N periods. For every period, he knows how many kilobytes of code he can produce.
During each of the periods, David can either have or not to have one cup of coffee. 
If he is having a cup of coffee in some period, the amount of code he writes in this period drops to zero. 
But he also gets a productivity boost â€” if he decides to skip coffee during a period and the last cup of coffee he had was no more than D periods ago, 
the amount of code he writes during such a period is M times the usual.
As his productivity advisor, help David to plan his coffee breaks optimally. 
Please find the maximum number of lines of code he can write, provided that he has exactly K coffee breaks during the day.
--------------------------------------------
#include <iostream>
#include <vector>
#include <set>
#include <iomanip>
#include <algorithm>
#include <functional>
#include <stdio.h>
#include <cmath>
#include <queue>
#include <string>
#include <map>
#include <complex>
#include <stack>
#include <set>

#define FOR(i,n) for (int i = 0;i<n;i++)
#define FORE(i, a, b) for (int i = a;i<= b;i++)
#define ll long long int
#define ff first
#define ss second
#define ii pair<int,int>
#define vi vector<int>
#define pb push_back
#define mp make_pair
using namespace std;
const ll INF = 1000000000000000;
const int MAXN = 5001;
const int MOD = (int)(1e9) + 7;

ll dp[MAXN][MAXN];
ll pre[MAXN];
int no_of_working_periods;
ll cost(int l,int r){

    r = min(r,no_of_working_periods-1);
    if(r < l)return 0;
    if(l == 0){
        return pre[r];
    }else{
        return pre[r] - pre[l-1];
    }
}
void solve(){
    int d,no_of_coffee_breaks;ll m;
    cin >> no_of_working_periods >> no_of_coffee_breaks >> d >> m;
    ll arr[no_of_working_periods];
    FOR(i,no_of_working_periods)cin >> arr[i];

    pre[0] = arr[0];
    FOR(i,no_of_working_periods-1){
        pre[i+1] = pre[i] + arr[i+1];
    }

    FOR(i,no_of_working_periods)FOR(j,no_of_working_periods)dp[i][j] =  0;
    ll precomp1[no_of_working_periods];
    ll precomp2[no_of_working_periods];
    ll mx1[no_of_working_periods];
    ll mx2[no_of_working_periods];

    FOR(i,no_of_coffee_breaks+1){
    	FOR(j,no_of_working_periods){
        	precomp1[j] = dp[j][i-1] - cost(0,j+d);
        	precomp2[j] = dp[j][i-1] - m*cost(0,j+d);
        }
        mx1[0] = precomp1[0];
        mx2[0] = precomp2[0];
        FOR(j,no_of_working_periods){
        	if(j==0)continue;
        	mx1[j] = max(mx1[j-1],precomp1[j]);
        	mx2[j] = max(mx2[j-1],precomp2[j]);

        }

        if(i == 0){
            FOR(j,no_of_working_periods)
            dp[j][i] = cost(0,j);

            continue;
        }
        if(i == 1){
            FOR(j,no_of_working_periods){
                dp[j][i] = cost(0,j-1) + m*cost(j+1,j+d);
            }

            continue;
        }

        deque<pair<ll,int> > q1;
        FOR(j,no_of_working_periods){
            dp[j][i] = -INF;

            if(j-d-1>=0){
            	dp[j][i] = max(dp[j][i], mx1[j-d-1] + m*cost(j+1,j+d) + cost(0,j-1));
            }
            if(!q1.empty()){
            	dp[j][i] = max(dp[j][i], q1.back().ff + m*cost(j+1,j+d) + m*cost(0,j-1));
            }

            ll yy = dp[j][i-1] - m*cost(0,j+d);
            if(!q1.empty() and q1.back().ss < j-d)q1.pop_back();
            while(!q1.empty() and q1.front().ff <= yy)q1.pop_front();
            q1.push_front(mp(yy,j));
        }
    }
    FOR(i,no_of_coffee_breaks+1){
        FOR(j,no_of_working_periods){

        }

    }

    ll sum = 0;
    ll mx = 0;
    for(int i = no_of_working_periods-1;i>d;i--){
        sum += arr[i];
        mx = max(mx,sum + dp[i-d-1][no_of_coffee_breaks]);
    }
    FORE(i,no_of_working_periods-1-d,no_of_working_periods-1)mx = max(mx,dp[i][no_of_coffee_breaks]);
    cout << mx << endl;

}
int main(){
    solve();
    return 0;

}
