Arun decided to order N Tomatoes for a future Tomato Festival. 
The company "Kissan" that delivers Tomatoes provides 3,000 yellow trucks and one red truck, and Arun wants to fully use them all. 
The trucks have identical capacities, so Arun wants each truck to transfer the same number of Tomatoes.
You are given a string M and an integer K. The decimal representation of the number N can be obtained by concatenating M with itself K times, 
For Example: if M=903 and K=3, it means that N=903903903. 
You are not allowed to add any leading zeroes to this decimal representation, however, it may initially contain leading zeroes.
It could be possible that N Tomatoes cannot be delivered while satisfying the given rule. 
Therefore, Arun may change an arbitrary number of digits (possibly zero) in the decimal representation of N, i.e. choose a number of positions in this string and change each of the digits at these positions to a different digit.
However, it is not allowed to change two or more digits with identical original values (at different positions). There are no restrictions on the resulting values of any digits; specifically, the resulting number is also allowed to contain leading zeroes.
Find the number of ways to change the number N so that all Tomatoes can be delivered by the company. Since this number can be very large, we ask you to compute it modulo 109+7.
-------------------------------------------------------------------------------
#include <bits/stdc++.h>
#define int long long
#define bp __builtin_popcountll
#define pb push_back
#define in(s) freopen(s, "r", stdin);
#define inout(s, end1, end2) freopen((string(s) + "." + end1).c_str(), "r", stdin),\
		freopen((string(s) + "." + end2).c_str(), "w", stdout);
#define fi first
#define se second
#define bw(i, r, l) for (int i = r - 1; i >= l; i--)
#define fw(i, l, r) for (int i = l; i < r; i++)
#define fa(i, x) for (auto i: x)
using namespace std;
const int mod = 1e9 + 7, inf = 1061109567, mod2 = 3001, halfmod = 1500;
const long long infll = 4557430888798830399;
string Tomatoes;
int Quantity, pw[1501], cnt[11][1501], dp[11][3001], ogm, curcnt[11][1501], tmp[11][1501], diff[11][3001];
int getpw(int a) {
	a %= 1500;
	return pw[a];
}
void add(int &x, int y) {
	x += y;
	if (x >= mod) x -= mod;
}
signed main() {
	#ifdef BLU
	#endif
	ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
	cin >> Tomatoes >> Quantity;
	reverse(Tomatoes.begin(), Tomatoes.end());
	pw[0] = 1;
	fw (i, 1, 1501) pw[i] = pw[i - 1] * 10 % mod2;
	fw (i, 0, Tomatoes.length()) cnt[Tomatoes[i] - '0'][i % halfmod]++;
	fw (i, 0, 10) fw (j, 0, halfmod) {
		fw (l, 0, halfmod) add(curcnt[i][(j + l * Tomatoes.length()) % halfmod], cnt[i][j]);
	}
	int need1 = Quantity % halfmod;
	int need2 = Quantity / halfmod;
	fw (i, 0, 10) fw (j, 0, halfmod) add(tmp[i][j], 1ll * curcnt[i][j] * need2 % mod);
	fw (i, 0, 10) fw (j, 0, halfmod) {
		fw (l, 0, need1) add(tmp[i][(j + l * Tomatoes.length()) % halfmod], cnt[i][j]);
	}
	fw (i, 0, 10) fw (j, 0, halfmod) cnt[i][j] = tmp[i][j];
	ogm = 0;
	fw (i, 0, 10) fw (j, 0, halfmod) {
		int tmp = 1ll * i * pw[j] % mod2;
		tmp = 1ll * tmp * cnt[i][j] % mod2;
		ogm += tmp;
		if (ogm >= mod2) ogm -= mod2;
	}
	memset(dp, 0, sizeof dp);
	dp[0][ogm] = 1;
	fw (i, 0, 10) diff[i][0] = 1;
	fw (i, 0, 10) fw (pos, 0, halfmod) if (cnt[i][pos]) {
		fw (rep, 0, 10) if (rep != i) {
			int newj = 0;
			newj -= i * pw[pos] % mod2;
			if (newj < 0) newj += mod2;
			newj += rep * pw[pos] % mod2;
			if (newj >= mod2) newj -= mod2;
			add(diff[i][newj], cnt[i][pos]);
		}
	}
	fw (i, 0, 10) fw (j, 0, mod2) if (dp[i][j]) {
		fw (newj, 0, mod2) {
			int tmp = newj - j;
			if (tmp < 0) tmp += mod2;
			add(dp[i + 1][newj], 1ll * dp[i][j] * diff[i][tmp] % mod);
		}
	}
	cout << dp[10][0];
	return 0;
}
